/* MIT Licensed */
"use strict";var _class,_class2,_class4,_class5,_class6,_class7,_class8,_class9,_class10,_class11,_class12,_class13,_class14,_class15,_class16,_class17,_class18,_class19,_class20,_class21,_class22,_class23,_class24,_class25,_class26,_class27,_class28,_class29,_class30,_class31,_class32,_class33,_class34,_class35,_class36,_class37,_class38,_class39,_class40,_class41,_class42,_class43,_class44,_class45,_class46,_class47,_class48,_class49,_class50,_class51,_class52,_class53,_class54,_class55,_class56,_class57,_class58,_class59,_class60,_class61,_class62,_class63,_class64,_class65,_class66,_class67,_class68,_class69,_class70,_class71,_class72,_class73,_class74,_class75,_class76,_class77,_class78,_class79,_class80,_class81;if(void 0===window)var window=globalThis;async function imports(t){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(t):Promise.all(t.map((t=>import(t))))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasInterface:!0,hasDocs:!0}),DiscordLib={};Blackprint.Environment.isNode&&(DiscordLib=await import("file:"+process.cwd()+"/node_modules/discord.js/src/index.js"));let _fType={},fType=function(t,e){let s=t[e];if(null==s&&(s=deepProperty(t,e.split("."))),null!=s)return s;if(Blackprint.Environment.isNode)throw new Error(`'Discord.${e}' class contructor was not found`);if(null==_fType[e]){let t=_fType[e]=class{};Object.defineProperty(t,"name",{value:e})}return _fType[e]};function deepProperty(t,e){for(var s=0;s<e.length;s++)if(null==(t=t[e[s]]))return;return t}let Context=Blackprint.createContext("Discord");Context.DiscordType=fType,Context.DiscordLib=DiscordLib,Context.EventSlot={slot:"my-private-event-slot"};class AutocompleteCreate{constructor(t){let{Input:e,Output:s}=t.ref;this.name=e.Name.toLowerCase(),this.description=e.Description;let n=e.Choices;n=0===n.length?null:n.map((t=>({name:t,value:t}))),this.choices=n,this.required=e.Required,this._node=t}toJSON(){return{name:this.name,type:3,description:this.description,required:this.required,choices:this.choices,autocomplete:null===this.choices}}}var _class3;Blackprint.registerNode("Discord/SlashCommand/Autocomplete/Create",((_class=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Create Autocomplete"}request(){this.update()}update(){let{Input:t,Output:e}=this.ref;if(t.Name){if(!1===/^[-_\p{L}\p{N}\p{sc=Deva}\p{sc=Thai}]{1,32}$/mu.test(t.Name))throw new Error("Invalid command name: "+t.Name);e.Data=new AutocompleteCreate(this)}}handle(t){this.output.Requested=t}}).input={Name:String,Description:String,Required:Boolean,Choices:Blackprint.Port.ArrayOf(String)},_class.output={Data:AutocompleteCreate,Requested:fType(DiscordLib,"BaseInteraction")},_class)),Blackprint.registerNode("Discord/SlashCommand/Autocomplete/Respond",((_class2=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Respond Autocomplete"}request(){this.update()}update(){let{Input:t,Output:e}=this.ref;t.Interaction?.isAutocomplete()&&t.Interaction.respond(t.Choices.map((t=>({name:t,value:t}))))}}).input={Interaction:fType(DiscordLib,"BaseInteraction"),Choices:Blackprint.Port.ArrayOf(String)},_class2.output={},_class2));let Types={User:Blackprint.Port.StructOf(fType(DiscordLib,"User"),{Id:{type:String,field:"id"},Bot:{type:Boolean,field:"bot"},Username:{type:String,field:"username"},Discriminator:{type:String,field:"discriminator"},Avatar:{type:String,field:"avatar"},AccentColor:{type:String,field:"accentColor"}}),BaseChannel:Blackprint.Port.StructOf(fType(DiscordLib,"BaseGuildTextChannel"),{Id:{type:String,field:"id"},Name:{type:String,field:"name"},Members:{type:Map,field:"members"},Messages:{type:fType(DiscordLib,"MessageManager"),field:"messages"}}),Guild:Blackprint.Port.StructOf(fType(DiscordLib,"Guild"),{Id:{type:String,field:"id"},Name:{type:String,field:"name"},Members:{type:Map,handle:t=>t.members.cache},Channels:{type:fType(DiscordLib,"GuildChannelManager"),field:"channels"}})};Blackprint.registerNode("Discord/Connection/REST",((_class4=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="REST"}update(){if(Blackprint.Environment.isBrowser)return;let{Input:t,Output:e}=this.ref;t.AccessToken&&(e.Client=new DiscordLib.REST({version:"10"}).setToken(t.AccessToken))}}).input={AccessToken:String},_class4.output={Client:fType(DiscordLib,"REST")},_class4)),Blackprint.registerNode("Discord/Connection/RPC",((_class5=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="RPC"}}).input={},_class5.output={},_class5)),Blackprint.registerNode("Discord/Connection/WebSocket",((_class6=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="WebSocket",this._toast=new NodeToast(e),this._toast.warn("Disconnected"),setTimeout((()=>this.syncOut("syncStatus")),600)}connect(){let{IntentsBits:t,AccessToken:e}=this.ref.Input;if(null==t||!e)return;if(!Blackprint.Environment.isNode)return this._toast.warn("Blackprint remote engine is required");this.syncOut("warn","Connecting");let{Output:s}=this.ref;s.Client?.destroy(),s.Ready=!1;let n=s.Client=new DiscordLib.Client({intents:new DiscordLib.IntentsBitField(t)});n.once("ready",(()=>{this.syncOut("success","Connected"),s.Ready=!0})),n.login(e)}syncIn(t,e){if("syncStatus"===t&&this.ref.Output.Ready&&setTimeout((()=>this.syncOut("success","Connected")),100),!Blackprint.Environment.isBrowser)return;let s=this._toast;"warn"===t&&s.warn(e),"success"===t&&(s.clear(),s.success(e))}disconnect(){let{Output:t}=this.ref;t.Client?.destroy(),t.Ready=!1,this._toast.warn("Disconnected")}}).input={Connect:Blackprint.Port.Trigger((t=>t.iface.node.connect())),Disconnect:Blackprint.Port.Trigger((t=>t.iface.node.disconnect())),IntentsBits:Blackprint.Port.Default(Number,131071),AccessToken:String},_class6.output={Client:fType(DiscordLib,"Client"),Ready:Boolean},_class6)),Blackprint.registerNode("Discord/Connection/Webhook",((_class7=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Webhook"}}).input={},_class7.output={},_class7)),Blackprint.registerNode("Discord/Event/Error",((_class8=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Error"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("error",this._callback),s.on("error",this._callback=t=>e.Data=t)}}).type="event",_class8.input={Client:fType(DiscordLib,"Client")},_class8.output={Data:Object},_class8)),Blackprint.registerNode("Discord/Event/Error",((_class9=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Invalidated"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("invalidated",this._callback),s.on("invalidated",this._callback=t=>e.Data=t)}}).type="event",_class9.input={Client:fType(DiscordLib,"Client")},_class9.output={Data:Object},_class9)),Blackprint.registerNode("Discord/Event/Error",((_class10=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Rate Limit"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("rateLimit",this._callback),s.on("rateLimit",this._callback=t=>e.Data=t)}}).type="event",_class10.input={Client:fType(DiscordLib,"Client")},_class10.output={Data:Object},_class10)),Blackprint.registerNode("Discord/Event/Error",((_class11=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Typing Start"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("typingStart",this._callback),s.on("typingStart",this._callback=t=>e.Data=t)}}).type="event",_class11.input={Client:fType(DiscordLib,"Client")},_class11.output={Data:Object},_class11)),Blackprint.registerNode("Discord/Event/Warn",((_class12=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Warn"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("warn",this._callback),s.on("warn",this._callback=t=>e.Data=t)}}).type="event",_class12.input={Client:fType(DiscordLib,"Client")},_class12.output={Data:Object},_class12)),Blackprint.registerNode("Discord/Interaction/Defer",((_class13=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Defer an interaction"}update(){let{Input:t}=this.ref;null!=t.Interaction&&t.Interaction.deferReply()}}).input={Interaction:fType(DiscordLib,"BaseInteraction")},_class13.output={},_class13)),Blackprint.registerNode("Discord/Interaction/Reply",((_class14=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Reply an interaction"}async send(){let{Input:t,Output:e}=this.ref;if(null==t.Interaction)return;let s=await t.Interaction.reply({content:t.Content,ephemeral:t.Ephemeral});s=await s.awaitMessageComponent(),e.Message=s.message}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),Interaction:fType(DiscordLib,"BaseInteraction"),Content:String,Ephemeral:Boolean},_class14.output={Message:fType(DiscordLib,"Message")},_class14)),Blackprint.registerNode("Discord/Message/Delete",((_class15=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Delete Message"}async send(){let{Input:t,Output:e}=this.ref;null!=t.Message&&(e.Deleted=await t.Message.delete())}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),Message:fType(DiscordLib,"Message")},_class15.output={Deleted:Boolean},_class15)),Blackprint.registerNode("Discord/Message/Modify",((_class16=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Modify Message"}async send(){let{Input:t,Output:e}=this.ref;null!=t.Message&&t.Content&&(e.Success=await t.Message.edit(t.Content))}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),Message:fType(DiscordLib,"Message"),Content:String},_class16.output={Success:Boolean},_class16)),Blackprint.registerNode("Discord/Message/Send",((_class17=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Send Message"}async send(){let{Input:t,Output:e}=this.ref;null!=t.TextChannel&&t.Content&&(e.Message=await t.TextChannel.send(t.Content))}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),TextChannel:fType(DiscordLib,"BaseGuildTextChannel"),Content:String},_class17.output={Message:fType(DiscordLib,"Message")},_class17));class SlashCommandCreate{constructor(t){let{Input:e,Output:s}=t.ref;this.name=e.Name,this.description=e.Description;let n=e.Autocompletes;n=0===n.length?null:n,this.options=n,this._node=t}toJSON(){return{name:this.name,description:this.description,options:this.options}}}Blackprint.registerNode("Discord/SlashCommand/Create",((_class18=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Create Slash Commands"}request(){this.update()}update(){let{Input:t,Output:e}=this.ref;t.Name&&(e.Command=new SlashCommandCreate(this))}interacted(t){this.output.Interacted=t}handleAutocomplete(t){let{Input:{Autocompletes:e}}=this.ref;if(0===e.length)return;let s=t.options.getFocused(!0);for(let n=0;n<e.length;n++){let i=e[n];if(i.name===s.name){i._node.handle(t);break}}}}).input={Name:String,Description:String,Autocompletes:Blackprint.Port.ArrayOf(AutocompleteCreate)},_class18.output={Command:SlashCommandCreate,Interacted:fType(DiscordLib,"BaseInteraction")},_class18)),Blackprint.registerNode("Discord/SlashCommand/GetOption",((_class19=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Get command option"}update(){let{Input:t,Output:e}=this.ref;if(null!=t.Interaction&&t.Name)try{e.Data=t.Interaction.options.get(t.Name.toLowerCase()).value}catch(t){e.Data=null}}}).input={Interaction:fType(DiscordLib,"BaseInteraction"),Name:String},_class19.output={Data:Blackprint.Types.Any},_class19)),Blackprint.registerNode("Discord/SlashCommand/Register",((_class20=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Register Slash Commands"}init(){let{IInput:t,Input:e}=this.ref;t.Event.on("value",(({cable:t})=>{let s=t.value;if(!s.isChatInputCommand()&&!s.isAutocomplete())return;let{GuildId:n,Commands:i}=e;if(n||n===s.guildId)for(let t=0;t<i.length;t++){let e=i[t];if(e.name===s.commandName){s.isAutocomplete()?e._node.handleAutocomplete(s):e._node.interacted(s);break}}}))}async send(){let{Input:t,Output:e}=this.ref;if(null==t.Client)return;let s=t.GuildId;""===s&&(s=null);try{await t.Client.put(DiscordLib.Routes.applicationGuildCommands(t.AppId,t.GuildId),{body:t.Commands})}catch(t){throw e.Success=!1,t}e.Success=!0}}).input={Client:fType(DiscordLib,"REST"),Event:fType(DiscordLib,"BaseInteraction"),Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),AppId:String,GuildId:String,Commands:Blackprint.Port.ArrayOf(SlashCommandCreate)},_class20.output={Success:Boolean},_class20));let NodeToast=Context.NodeToast=class{constructor(t){this.iface=t}clear(){this.haveInfo&&this.haveInfo.destroy(),this.haveWarn&&this.haveWarn.destroy(),this.haveError&&this.haveError.destroy(),this.haveInfo=!1,this.haveWarn=!1,this.haveError=!1}_reduceText(t){return t.replace(/\w{15,}/g,(t=>t.slice(0,5)+"..."))}info(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveInfo?this.haveInfo.text=t:this.haveInfo=this.iface.$decoration.info(t),this.haveInfo._raw=e}warn(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveWarn?this.haveWarn.text=t:this.haveWarn=this.iface.$decoration.warn(t),this.haveWarn._raw=e}error(t){if(!this.iface.$decoration)return;let e=t;t=this._reduceText(t),this.haveError?this.haveError.text=t:this.haveError=this.iface.$decoration.error(t),this.haveError._raw=e}success(t){if(!this.iface.$decoration)return;this.iface.$decoration.success(this._reduceText(t))._raw=t}};Blackprint.registerNode("Discord/Bot/Set/Activity",((_class21=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set bot's activity"}update(){let{Input:t,Output:e}=this.ref;null!=t.Client&&t.Text&&t.Client.user.setActivity(t.Text,{type:t.Type})}}).input={Client:fType(DiscordLib,"Client"),Type:Blackprint.Port.Default(Number,0),Text:String},_class21.output={},_class21)),Blackprint.registerNode("Discord/Bot/Set/Avatar",((_class22=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set bot's avatar"}update(){let{Input:t,Output:e}=this.ref;null!=t.Client&&t.URL&&t.Client.user.setAvatar(t.URL)}}).input={Client:fType(DiscordLib,"Client"),URL:String},_class22)),Blackprint.registerNode("Discord/Bot/Set/Status",((_class23=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set bot's status"}update(){let{Input:t,Output:e}=this.ref;null!=t.Client&&t.Status&&t.Client.user.setStatus(t.Status)}}).input={Client:fType(DiscordLib,"Client"),Status:Blackprint.Port.Default(String,"online")},_class23.output={},_class23)),Blackprint.registerNode("Discord/Bot/Set/Username",((_class24=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Set bot's username"}update(){let{Input:t,Output:e}=this.ref;null!=t.Client&&t.Username&&t.Client.user.setUsername(t.Username)}}).input={Client:fType(DiscordLib,"Client"),Username:String},_class24)),Blackprint.registerNode("Discord/Event/Channel/Create",((_class25=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Channel Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("channelCreate",this._callback),s.on("channelCreate",this._callback=t=>e.Data=t)}}).type="event",_class25.input={Client:fType(DiscordLib,"Client")},_class25.output={Data:Object},_class25)),Blackprint.registerNode("Discord/Event/Channel/Delete",((_class26=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Channel Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("channelDelete",this._callback),s.on("channelDelete",this._callback=t=>e.Data=t)}}).type="event",_class26.input={Client:fType(DiscordLib,"Client")},_class26.output={Data:Object},_class26)),Blackprint.registerNode("Discord/Event/Channel/Update",((_class27=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Channel Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("channelUpdate",this._callback),s.on("channelUpdate",this._callback=t=>e.Data=t)}}).type="event",_class27.input={Client:fType(DiscordLib,"Client")},_class27.output={Data:Object},_class27)),Blackprint.registerNode("Discord/Event/Emoji/Create",((_class28=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Emoji Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("emojiCreate",this._callback),s.on("emojiCreate",this._callback=t=>e.Data=t)}}).type="event",_class28.input={Client:fType(DiscordLib,"Client")},_class28.output={Data:Object},_class28)),Blackprint.registerNode("Discord/Event/Emoji/Delete",((_class29=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Emoji Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("emojiDelete",this._callback),s.on("emojiDelete",this._callback=t=>e.Data=t)}}).type="event",_class29.input={Client:fType(DiscordLib,"Client")},_class29.output={Data:Object},_class29)),Blackprint.registerNode("Discord/Event/Emoji/Update",((_class30=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Emoji Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("emojiUpdate",this._callback),s.on("emojiUpdate",this._callback=t=>e.Data=t)}}).type="event",_class30.input={Client:fType(DiscordLib,"Client")},_class30.output={Data:Object},_class30)),Blackprint.registerNode("Discord/Event/Guild/Create",((_class31=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildCreate",this._callback),s.on("guildCreate",this._callback=t=>e.Data=t)}}).type="event",_class31.input={Client:fType(DiscordLib,"Client")},_class31.output={Data:Object},_class31)),Blackprint.registerNode("Discord/Event/Guild/Delete",((_class32=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildDelete",this._callback),s.on("guildDelete",this._callback=t=>e.Data=t)}}).type="event",_class32.input={Client:fType(DiscordLib,"Client")},_class32.output={Data:Object},_class32)),Blackprint.registerNode("Discord/Event/Guild/IntegrationsUpdate",((_class33=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild IntegrationsUpdate"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildIntegrationsUpdate",this._callback),s.on("guildIntegrationsUpdate",this._callback=t=>e.Data=t)}}).type="event",_class33.input={Client:fType(DiscordLib,"Client")},_class33.output={Data:Object},_class33)),Blackprint.registerNode("Discord/Event/Guild/Unavailable",((_class34=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Unavailable"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildUnavailable",this._callback),s.on("guildUnavailable",this._callback=t=>e.Data=t)}}).type="event",_class34.input={Client:fType(DiscordLib,"Client")},_class34.output={Data:Object},_class34)),Blackprint.registerNode("Discord/Event/Guild/Update",((_class35=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildUpdate",this._callback),s.on("guildUpdate",this._callback=t=>e.Data=t)}}).type="event",_class35.input={Client:fType(DiscordLib,"Client")},_class35.output={Data:Object},_class35)),Blackprint.registerNode("Discord/Event/Interaction/Create",((_class36=class extends Blackprint.Node{constructor(t){super(t),this.setInterface("BPIC/Discord/Event/Interaction/Create").title="Interaction Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("interactionCreate",this._callback),s.on("interactionCreate",this._callback=t=>{let s=this.iface.data.type;if(0===s);else if(1===s){if(!t.isButton())return}else if(2===s){if(!t.isAutocomplete())return}else if(3===s){if(!t.isChatInputCommand())return}else if(4===s){if(!t.isCommand())return}else if(5===s){if(!t.isContextMenuCommand())return}else if(6===s){if(!t.isMessageComponent())return}else if(7===s){if(!t.isMessageContextMenuCommand())return}else if(8===s){if(!t.isModalSubmit())return}else if(9===s){if(!t.isSelectMenu())return}else if(10===s&&!t.isUserContextMenuCommand())return;e.Data=t})}syncIn(t,e){"type"===t&&(this.data.type=e)}}).type="event",_class36.input={Client:fType(DiscordLib,"Client")},_class36.output={Data:fType(DiscordLib,"BaseInteraction")},_class36)),Blackprint.registerInterface("BPIC/Discord/Event/Interaction/Create",class extends Blackprint.Interface{constructor(t){super(t),this.data={type:0}}}),Blackprint.registerNode("Discord/Event/Invite/Create",((_class37=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Invite Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("inviteCreate",this._callback),s.on("inviteCreate",this._callback=t=>e.Data=t)}}).type="event",_class37.input={Client:fType(DiscordLib,"Client")},_class37.output={Data:Object},_class37)),Blackprint.registerNode("Discord/Event/Invite/Delete",((_class38=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Invite Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("inviteDelete",this._callback),s.on("inviteDelete",this._callback=t=>e.Data=t)}}).type="event",_class38.input={Client:fType(DiscordLib,"Client")},_class38.output={Data:Object},_class38)),Blackprint.registerNode("Discord/Event/Message/Create",((_class39=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Message Create",e.type="event"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;null!=s&&(this.unlisten=()=>s.off("messageCreate",this._callback),s.on("messageCreate",this._callback=t=>{t.author?.bot||(e.Data=t)}))}}).type="event",_class39.input={Client:fType(DiscordLib,"Client")},_class39.output={Data:Blackprint.Port.StructOf(fType(DiscordLib,"Message"),{Id:{type:String,field:"id"},Content:{type:String,field:"content"},CreatedAt:{type:Date,field:"createdAt"},Author:{type:Types.User,field:"author"},Channel:{type:Types.BaseChannel,field:"channel"},Guild:{type:Types.Guild,field:"guild"}})},_class39)),Blackprint.registerNode("Discord/Event/Message/Delete",((_class40=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageDelete",this._callback),s.on("messageDelete",this._callback=t=>e.Data=t)}}).type="event",_class40.input={Client:fType(DiscordLib,"Client")},_class40.output={Data:Object},_class40)),Blackprint.registerNode("Discord/Event/Message/DeleteBulk",((_class41=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Bulk Deletion"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageDeleteBulk",this._callback),s.on("messageDeleteBulk",this._callback=t=>e.Data=t)}}).type="event",_class41.input={Client:fType(DiscordLib,"Client")},_class41.output={Data:Object},_class41)),Blackprint.registerNode("Discord/Event/Message/Update",((_class42=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageUpdate",this._callback),s.on("messageUpdate",this._callback=t=>e.Data=t)}}).type="event",_class42.input={Client:fType(DiscordLib,"Client")},_class42.output={Data:Object},_class42)),Blackprint.registerNode("Discord/Event/Role/Create",((_class43=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Role Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("roleCreate",this._callback),s.on("roleCreate",this._callback=t=>e.Data=t)}}).type="event",_class43.input={Client:fType(DiscordLib,"Client")},_class43.output={Data:Object},_class43)),Blackprint.registerNode("Discord/Event/Role/Delete",((_class44=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Role Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("roleDelete",this._callback),s.on("roleDelete",this._callback=t=>e.Data=t)}}).type="event",_class44.input={Client:fType(DiscordLib,"Client")},_class44.output={Data:Object},_class44)),Blackprint.registerNode("Discord/Event/Role/Update",((_class45=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Role Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("roleUpdate",this._callback),s.on("roleUpdate",this._callback=t=>e.Data=t)}}).type="event",_class45.input={Client:fType(DiscordLib,"Client")},_class45.output={Data:Object},_class45)),Blackprint.registerNode("Discord/Event/Stage/Create",((_class46=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Stage Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stageInstanceCreate",this._callback),s.on("stageInstanceCreate",this._callback=t=>e.Data=t)}}).type="event",_class46.input={Client:fType(DiscordLib,"Client")},_class46.output={Data:Object},_class46)),Blackprint.registerNode("Discord/Event/Stage/Delete",((_class47=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Stage Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stageInstanceDelete",this._callback),s.on("stageInstanceDelete",this._callback=t=>e.Data=t)}}).type="event",_class47.input={Client:fType(DiscordLib,"Client")},_class47.output={Data:Object},_class47)),Blackprint.registerNode("Discord/Event/Stage/Update",((_class48=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Stage Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stageInstanceUpdate",this._callback),s.on("stageInstanceUpdate",this._callback=t=>e.Data=t)}}).type="event",_class48.input={Client:fType(DiscordLib,"Client")},_class48.output={Data:Object},_class48)),Blackprint.registerNode("Discord/Event/Sticker/Create",((_class49=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Sticker Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stickerCreate",this._callback),s.on("stickerCreate",this._callback=t=>e.Data=t)}}).type="event",_class49.input={Client:fType(DiscordLib,"Client")},_class49.output={Data:Object},_class49)),Blackprint.registerNode("Discord/Event/Sticker/Delete",((_class50=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Sticker Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stickerDelete",this._callback),s.on("stickerDelete",this._callback=t=>e.Data=t)}}).type="event",_class50.input={Client:fType(DiscordLib,"Client")},_class50.output={Data:Object},_class50)),Blackprint.registerNode("Discord/Event/Sticker/Update",((_class51=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Sticker Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("stickerUpdate",this._callback),s.on("stickerUpdate",this._callback=t=>e.Data=t)}}).type="event",_class51.input={Client:fType(DiscordLib,"Client")},_class51.output={Data:Object},_class51)),Blackprint.registerNode("Discord/Event/Thread/Create",((_class52=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Thread Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("threadCreate",this._callback),s.on("threadCreate",this._callback=t=>e.Data=t)}}).type="event",_class52.input={Client:fType(DiscordLib,"Client")},_class52.output={Data:Object},_class52)),Blackprint.registerNode("Discord/Event/Thread/Delete",((_class53=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Thread Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("threadDelete",this._callback),s.on("threadDelete",this._callback=t=>e.Data=t)}}).type="event",_class53.input={Client:fType(DiscordLib,"Client")},_class53.output={Data:Object},_class53)),Blackprint.registerNode("Discord/Event/Thread/ListSync",((_class54=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Thread ListSync"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("threadListSync",this._callback),s.on("threadListSync",this._callback=t=>e.Data=t)}}).type="event",_class54.input={Client:fType(DiscordLib,"Client")},_class54.output={Data:Object},_class54)),Blackprint.registerNode("Discord/Event/Channel/Update",((_class55=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Channel Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("threadMembersUpdate",this._callback),s.on("threadMembersUpdate",this._callback=t=>e.Data=t)}}).type="event",_class55.input={Client:fType(DiscordLib,"Client")},_class55.output={Data:Object},_class55)),Blackprint.registerNode("Discord/Event/Thread/Update",((_class56=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Thread Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("threadUpdate",this._callback),s.on("threadUpdate",this._callback=t=>e.Data=t)}}).type="event",_class56.input={Client:fType(DiscordLib,"Client")},_class56.output={Data:Object},_class56)),Blackprint.registerNode("Discord/Event/User/PresenceUpdate",((_class57=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="User Presence Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("presenceUpdate",this._callback),s.on("presenceUpdate",this._callback=t=>e.Data=t)}}).type="event",_class57.input={Client:fType(DiscordLib,"Client")},_class57.output={Data:Object},_class57)),Blackprint.registerNode("Discord/Event/User/Update",((_class58=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="User Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("userUpdate",this._callback),s.on("userUpdate",this._callback=t=>e.Data=t)}}).type="event",_class58.input={Client:fType(DiscordLib,"Client")},_class58.output={Data:Object},_class58)),Blackprint.registerNode("Discord/Event/Voice/StateUpdate",((_class59=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Voice State Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("voiceStateUpdate",this._callback),s.on("voiceStateUpdate",this._callback=t=>e.Data=t)}}).type="event",_class59.input={Client:fType(DiscordLib,"Client")},_class59.output={Data:Object},_class59)),Blackprint.registerNode("Discord/Event/Webhook/Update",((_class60=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Webhook Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("webhookUpdate",this._callback),s.on("webhookUpdate",this._callback=t=>e.Data=t)}}).type="event",_class60.input={Client:fType(DiscordLib,"Client")},_class60.output={Data:Object},_class60));let modalCreateId=0;Blackprint.registerNode("Discord/Interaction/Modal/Create",((_class61=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Reply an interaction",this._customId="modal"+ ++modalCreateId}_listen(){let{Input:t,Output:e}=this.ref,s=t.Interaction.client;function n(t){t.isModalSubmit()&&t.customId===this._customId&&(e.UserSubmit=t)}this._client!==s&&(this._client=s,this._unlisten?.(),this._unlisten=()=>s.off("interactionCreate",n),s.on("interactionCreate",n))}async exec(){let{Input:t}=this.ref;if(null==t.Interaction||0===t.Rows.length)return;let e=new DiscordLib.ModalBuilder;e.setCustomId(this._customId),e.setTitle(t.Title);let s=t.Rows;for(let t=0;t<s.length;t++)e.addComponents((new ActionRowBuilder).addComponents(s[t]));await t.Interaction.showModal(e)}destroy(){this._unlisten?.()}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.exec())),Interaction:fType(DiscordLib,"BaseInteraction"),Title:String,Rows:Blackprint.Port.ArrayOf(fType(DiscordLib,"TextInputBuilder"))},_class61.output={UserSubmit:fType(DiscordLib,"BaseInteraction")},_class61)),Blackprint.registerNode("Discord/Interaction/Modal/TextInput",((_class62=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Text input box"}request(){this.update()}update(){let{Input:t,Output:e}=this.ref;t.CustomId&&t.Label&&(e.Object=(new DiscordLib.TextInputBuilder).setCustomId(t.CustomId).setLabel(t.Label).setStyle(t.Style))}}).input={CustomId:String,Label:String,Style:Blackprint.Port.Default(String,"short")},_class62.output={Object:fType(DiscordLib,"TextInputBuilder")},_class62)),Blackprint.registerNode("Discord/Message/Reaction/Add",((_class63=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Add Message Reaction"}async send(){let{Input:t,Output:e}=this.ref;null!=t.Message&&t.Emoji&&(e.Reacted=await t.Message.react(t.Emoji))}}).input={Exec:Blackprint.Port.Trigger((t=>t.iface.node.send())),Message:fType(DiscordLib,"Message"),Emoji:String},_class63.output={Reacted:fType(DiscordLib,"MessageReaction")},_class63)),Blackprint.registerNode("Discord/Event/Channel/Pins/Update",((_class64=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Channel Pins Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("channelPinsUpdate",this._callback),s.on("channelPinsUpdate",this._callback=t=>e.Data=t)}}).type="event",_class64.input={Client:fType(DiscordLib,"Client")},_class64.output={Data:Object},_class64)),Blackprint.registerNode("Discord/Event/Guild/Ban/Add",((_class65=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Ban Add"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildBanAdd",this._callback),s.on("guildBanAdd",this._callback=t=>e.Data=t)}}).type="event",_class65.input={Client:fType(DiscordLib,"Client")},_class65.output={Data:Object},_class65)),Blackprint.registerNode("Discord/Event/Guild/Ban/Remove",((_class66=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Ban Remove"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildBanRemove",this._callback),s.on("guildBanRemove",this._callback=t=>e.Data=t)}}).type="event",_class66.input={Client:fType(DiscordLib,"Client")},_class66.output={Data:Object},_class66)),Blackprint.registerNode("Discord/Event/Guild/Member/Add",((_class67=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Member Add"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildMemberAdd",this._callback),s.on("guildMemberAdd",this._callback=t=>e.Data=t)}}).type="event",_class67.input={Client:fType(DiscordLib,"Client")},_class67.output={Data:Object},_class67)),Blackprint.registerNode("Discord/Event/Guild/Member/Available",((_class68=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Member Available"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildMemberAvailable",this._callback),s.on("guildMemberAvailable",this._callback=t=>e.Data=t)}}).type="event",_class68.input={Client:fType(DiscordLib,"Client")},_class68.output={Data:Object},_class68)),Blackprint.registerNode("Discord/Event/Guild/Member/Chunk",((_class69=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Member Chunk"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildMembersChunk",this._callback),s.on("guildMembersChunk",this._callback=t=>e.Data=t)}}).type="event",_class69.input={Client:fType(DiscordLib,"Client")},_class69.output={Data:Object},_class69)),Blackprint.registerNode("Discord/Event/Guild/Member/Remove",((_class70=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Member Remove"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildMemberRemove",this._callback),s.on("guildMemberRemove",this._callback=t=>e.Data=t)}}).type="event",_class70.input={Client:fType(DiscordLib,"Client")},_class70.output={Data:Object},_class70)),Blackprint.registerNode("Discord/Event/Guild/Member/Update",((_class71=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild Member Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildMemberUpdate",this._callback),s.on("guildMemberUpdate",this._callback=t=>e.Data=t)}}).type="event",_class71.input={Client:fType(DiscordLib,"Client")},_class71.output={Data:Object},_class71)),Blackprint.registerNode("Discord/Event/Guild/ScheduledEvent/Create",((_class72=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild ScheduledEvent Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildScheduledEventCreate",this._callback),s.on("guildScheduledEventCreate",this._callback=t=>e.Data=t)}}).type="event",_class72.input={Client:fType(DiscordLib,"Client")},_class72.output={Data:Object},_class72)),Blackprint.registerNode("Discord/Event/Guild/ScheduledEvent/Delete",((_class73=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild ScheduledEvent Delete"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildScheduledEventDelete",this._callback),s.on("guildScheduledEventDelete",this._callback=t=>e.Data=t)}}).type="event",_class73.input={Client:fType(DiscordLib,"Client")},_class73.output={Data:Object},_class73)),Blackprint.registerNode("Discord/Event/Guild/ScheduledEvent/Update",((_class74=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild ScheduledEvent Update"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildScheduledEventUpdate",this._callback),s.on("guildScheduledEventUpdate",this._callback=t=>e.Data=t)}}).type="event",_class74.input={Client:fType(DiscordLib,"Client")},_class74.output={Data:Object},_class74)),Blackprint.registerNode("Discord/Event/Guild/ScheduledEvent/Create",((_class75=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild ScheduledEvent Create"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("emojiCreate",this._callback),s.on("emojiCreate",this._callback=t=>e.Data=t)}}).type="event",_class75.input={Client:fType(DiscordLib,"Client")},_class75.output={Data:Object},_class75)),Blackprint.registerNode("Discord/Event/Guild/ScheduledEvent/UserRemove",((_class76=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Guild ScheduledEvent UserRemove"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("guildScheduledEventUserRemove",this._callback),s.on("guildScheduledEventUserRemove",this._callback=t=>e.Data=t)}}).type="event",_class76.input={Client:fType(DiscordLib,"Client")},_class76.output={Data:Object},_class76)),Blackprint.registerNode("Discord/Event/Message/Reaction/Add",((_class77=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Reaction Add"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageReactionAdd",this._callback),s.on("messageReactionAdd",this._callback=t=>e.Data=t)}}).type="event",_class77.input={Client:fType(DiscordLib,"Client")},_class77.output={Data:Object},_class77)),Blackprint.registerNode("Discord/Event/Message/Reaction/Remove",((_class78=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Reaction Remove"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageReactionRemove",this._callback),s.on("messageReactionRemove",this._callback=t=>e.Data=t)}}).type="event",_class78.input={Client:fType(DiscordLib,"Client")},_class78.output={Data:Object},_class78)),Blackprint.registerNode("Discord/Event/Message/Reaction/RemoveAll",((_class79=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Reaction Remove All"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageReactionRemoveAll",this._callback),s.on("messageReactionRemoveAll",this._callback=t=>e.Data=t)}}).type="event",_class79.input={Client:fType(DiscordLib,"Client")},_class79.output={Data:Object},_class79)),Blackprint.registerNode("Discord/Event/Message/Reaction/RemoveEmoji",((_class80=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Message Reaction Remove Emoji"}init(){this.ref.IInput.Client.on("disconnect",Context.EventSlot,(()=>this.unlisten?.()))}update(){this.unlisten?.();let{Input:t,Output:e}=this.ref,s=t.Client;this.unlisten=()=>s.off("messageReactionRemoveEmoji",this._callback),s.on("messageReactionRemoveEmoji",this._callback=t=>e.Data=t)}}).type="event",_class80.input={Client:fType(DiscordLib,"Client")},_class80.output={Data:Object},_class80)),Blackprint.registerNode("Discord/Interaction/Modal/GetValue/TextInput",((_class81=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Text input value"}update(){let{Input:t,Output:e}=this.ref;t.Interaction&&t.CustomId&&(e.Text=t.Interaction.fields.getTextInputValue(t.CustomId))}}).input={Interaction:fType(DiscordLib,"BaseInteraction"),CustomId:String},_class81.output={Text:String},_class81));
//# sourceMappingURL=nodes-discord.mjs.map