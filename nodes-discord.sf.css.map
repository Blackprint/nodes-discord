{"version":3,"sources":["nodes-discord.sf.css","src/Event/Interaction/Create.sf"],"names":[],"mappings":"AACA,uE,CCiCA,a","file":"nodes-discord.sf.css","sourcesContent":["/* MIT Licensed */\nsf-space[blackprint] BPIC-Discord-Event-Interaction-Create .node select {\n  display: block; }\n\n\n\n/*# sourceMappingURL=nodes-discord.sf.css.map */","## html\n<div class=\"node {{ type }}\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <select value=\"{{ data.type }}\" type=\"number\">\n\t\t<option value=\"0\" selected>Any Interaction</option>\n\t\t<option value=\"1\">Is Button</option>\n\t\t<option value=\"2\">Is Autocomplete</option>\n\t\t<option value=\"3\">Is ChatInputCommand</option>\n\t\t<option value=\"4\">Is Command</option>\n\t\t<option value=\"5\">Is ContextMenuCommand</option>\n\t\t<option value=\"6\">Is MessageComponent</option>\n\t\t<option value=\"7\">Is MessageContextMenuCommand</option>\n\t\t<option value=\"8\">Is ModalSubmit</option>\n\t\t<option value=\"9\">Is SelectMenu</option>\n\t\t<option value=\"10\">Is UserContextMenuCommand</option>\n\t</select>\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nsf-space[blackprint] BPIC-Discord-Event-Interaction-Create .node {\n\tselect{\n\t\tdisplay: block;\n\t}\n}\n\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/Discord/Event/Interaction/Create',\nclass extends Blackprint.Interface{\n\tconstructor(node){\n\t\tsuper(node);\n\t\tthis.data = new DiscordEventInteractionCreate(this);\n\t}\n});\n\nclass DiscordEventInteractionCreate {\n\t#iface = null;\n\tconstructor(iface){this.#iface = iface}\n\n\t_type = 0;\n\tget type(){return this._type}\n\tset type(data){\n\t\tthis._type = data;\n\t\tthis.#iface.node.syncOut('type', data);\n\t}\n}"]}