{"version":3,"names":["window","templates","_$_","sf","dom","$","__tmplt","_sf_internal","body_map","_replace","path","html","h","this","remove","reinitViews","append","document","body","apply","arguments","prepend","Blackprint","loadScope","url","getContext","Sketch","registerInterface","Interface","constructor","node","super","data","DiscordEventInteractionCreate","_iface","_classPrivateFieldLooseKey","iface","Object","defineProperty","writable","value","_type","_classPrivateFieldLooseBase","type","syncOut"],"sources":["src/_init.sf","src/Event/Interaction/Create.sf"],"sourcesContent":[".js will run first before .sf\n\n## js-global\n// Because .js and .sf is separated\n// we also need to call LoadScope just like _init.js\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Use sQuery\nlet $ = sf.$;\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('Discord');\n\n// Context.EventSlot => shared from \"_init.js\"","## html\n<div class=\"node {{ type }}\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <select value=\"{{ data.type }}\" type=\"number\">\n\t\t<option value=\"0\" selected>Any Interaction</option>\n\t\t<option value=\"1\">Is Button</option>\n\t\t<option value=\"2\">Is Autocomplete</option>\n\t\t<option value=\"3\">Is ChatInputCommand</option>\n\t\t<option value=\"4\">Is Command</option>\n\t\t<option value=\"5\">Is ContextMenuCommand</option>\n\t\t<option value=\"6\">Is MessageComponent</option>\n\t\t<option value=\"7\">Is MessageContextMenuCommand</option>\n\t\t<option value=\"8\">Is ModalSubmit</option>\n\t\t<option value=\"9\">Is SelectMenu</option>\n\t\t<option value=\"10\">Is UserContextMenuCommand</option>\n\t</select>\n\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nsf-space[blackprint] BPIC-Discord-Event-Interaction-Create .node {\n\tselect{\n\t\tdisplay: block;\n\t}\n}\n\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/Discord/Event/Interaction/Create',\nclass extends Blackprint.Interface{\n\tconstructor(node){\n\t\tsuper(node);\n\t\tthis.data = new DiscordEventInteractionCreate(this);\n\t}\n});\n\nclass DiscordEventInteractionCreate {\n\t#iface = null;\n\tconstructor(iface){this.#iface = iface}\n\n\t_type = 0;\n\tget type(){return this._type}\n\tset type(data){\n\t\tthis._type = data;\n\t\tthis.#iface.node.syncOut('type', data);\n\t}\n}"],"mappings":"mXAEAA,EAAAC,YAAAD,EAAAC,UAAA,QAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAC,EAAAN,EAAAC,UAAAD,EAAAO,aAAAP,EAAAO,cAAA,CAAAC,SAAA,GAAAC,SAAAC,EAAAC,GAAA,IAAAC,EAAAV,EAAAS,GAAA,OAAAE,KAAAL,SAAAE,IAAAG,KAAAL,SAAAE,GAAAI,SAAAD,KAAAE,aAAAF,KAAAE,YAAAH,GAAAC,KAAAL,SAAAE,GAAAE,CAAA,EAAAI,OAAAN,EAAAC,GAAAT,EAAAe,SAAAC,MAAAF,OAAAH,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,EAAAC,QAAAX,EAAAC,GAAAT,EAAAe,SAAAC,MAAAG,QAAAR,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,GAEA,IAAAE,EAAAtB,EAAAsB,WAAAC,UAAA,CAGAC,sBAIArB,GAAAE,QAGAiB,EAAAG,WAAA,W,4mCC2BAH,EAAAI,OAAAC,kBAAA,wCACA,cAAAL,EAAAM,UACAC,YAAAC,GACAC,MAAAD,GACAjB,KAAAmB,KAAA,IAAAC,EAAApB,KACA,IACA,IAAAqB,EAAAC,2BAAA,SAEA,MAAAF,EAEAJ,YAAAO,GAAAC,OAAAC,eAAAzB,KAAAqB,EAAA,CAAAK,UAAA,EAAAC,MADA,OAAA3B,KAGA4B,MAAA,EAFAC,4BAAA7B,KAAAqB,MAAAE,CAAA,CAGA,QAAAO,GAAA,OAAA9B,KAAA4B,KAAA,CACA,QAAAE,CAAAX,GACAnB,KAAA4B,MAAAT,EACAU,4BAAA7B,KAAAqB,MAAAJ,KAAAc,QAAA,OAAAZ,EACA,E"}